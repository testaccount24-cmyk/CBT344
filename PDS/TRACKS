         /*Copyright 21 Mar 2002 by JBG REXX Tracks                  */
         /*----------------------------------------------------------*/
         /* JBG 25.03.2002 BERNING Use myUseLMDListForeverLoop for   */
         /* JBG 25.03.2002 BERNING extensive LMDList-Calls ;)        */
         /* JBG 25.03.2002 BERNING Better switch it off by specifying*/
         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 0       */
         /*----------------------------------------------------------*/
         /* JBG 25.03.2002 BERNING Some stats:                       */
         /* JBG 25.03.2002 BERNING IBM7060-H30, OS/390 2.9           */
         /* JBG 25.03.2002 BERNING 5621 lines under the HLQ "ADA",   */
         /* JBG 25.03.2002 BERNING 4829 lines contain Datasets which */
         /* JBG 25.03.2002 BERNING return space information:         */
         /* JBG 25.03.2002 BERNING                                   */
         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 0:      */
         /* JBG 25.03.2002 BERNING CPUTime used:35.55                */
         /* JBG 25.03.2002 BERNING Service Units:10204045            */
         /* JBG 25.03.2002 BERNING                                   */
         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 1:      */
         /* JBG 25.03.2002 BERNING CPUTime used:155.57               */
         /* JBG 25.03.2002 BERNING Service Units:44563811            */
         /*----------------------------------------------------------*/
         /* The author can be reached at joerg.berning(at)gmx.net    */
         /*----------------------------------------------------------*/
         trace off
         myStartSysCPU = sysvar("SYSCPU")
         myStartSysSRV = sysvar("SYSSRV")
         myUseLMDListForeverLoop = 0
         myTCB = c2x(storage(21C,4))        /* fixed by architecture */
         myTCBOTC = c2x(storage(d2x(x2d(myTCB) + x2d(84)),4))
         myTCBFSA = c2x(storage(d2x(x2d(myTCBOTC) + x2d(70)),4))
         myISPTASK#R1 = c2x(storage(d2x(x2d(myTCBFSA) + x2d(18)),4))
         myTLD = c2x(storage(myISPTASK#R1,4))
         myTLDTLSP = c2x(storage(d2x(x2d(myTLD) + x2d(60)),4)) /* Screen */
         myTLDCLSWD = c2d(storage(d2x(x2d(myTLD) + x2d(C0)),4)) /* width */
         myTLDHigth = c2d(storage(d2x(x2d(myTLD) + x2d(C4)),4)) /* higth */
         myScreenSize = myTLDCLSWD * myTLDHigth
         myScreenAsString = storage(myTLDTLSP,myScreenSize)
         mySearchForString = "DSLIST - Data Sets Matching"
         mySearchForStringLength = length(mySearchForString)
         mySearchForPos = pos(mySearchForString,myScreenAsString)
         if mySearchForPos = 0 then
           do
             mySearchForString = "DSLIST - Data Sets on volume"
             mySearchForStringLength = length(mySearchForString)
             mySearchForPos = pos(mySearchForString,myScreenAsString)
             if mySearchForPos = 0 then
               do
                 zErrSM = "No DSLIST-String found|"
                 zErrLM = "Neither '"mySearchForString"'",
                   "nor 'DSLIST - Data Sets Matching' found on screen."
                 zErrAlrm = "YES"
                 zErrHM = "ISR2MACR"
                 address ispexec
                 "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
                 "SETMSG MSG(ISRZ002)"
                 exit 12
               end /* of if */
             else
               call myAddTracksFromDataSetsOnVolume
           end /* of if */
         else
           call myAddTracksFromDataSetsMatching
         exit

         myAddTracksFromDataSetsMatching:
           myDSNPos = mySearchForPos + mySearchForStringLength +1
           myRowPos = pos("Row",myScreenAsString,mySearchForPos) -1
           myMaxDSNLength = myRowPos - myDSNPos
           myLevel = strip(substr(myScreenAsString,myDSNPos,,
             myMaxDSNLength))
           address ispexec
           "lmdinit listid(myListID) level("myLevel")"
           if RC <> 0 then
             do
               say "LMDInit-RC:"rc
               exit
             end
           call myAddAllTracks
           "lmdfree listid("myListID")"
           myEndSysCPU = sysvar("SYSCPU")
           myEndSysSRV = sysvar("SYSSRV")
           myUsedSysCPU = myEndSysCPU - myStartSysCPU
           myUsedSysSRV = myEndSysSRV - myStartSysSRV
           zErrSM = my#OfTracks "Tracks"
           zErrLM = my#OfTracks "Tracks(="my#OfCyls":"||,
             my#OfTracksRemainder,
             "Cyls) under",
             myLevel" for "myRowCount,
             "lines." mySpaceReturnedCount "lines contain",
             "Datasets which return space information.",
             "CPUTime used:"myUsedSysCPU", Service Units:"myUsedSysSRV
           zErrAlrm = "YES"
           zErrHM = "ISR2MACR"
           "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
           "SETMSG MSG(ISRZ002)"
         return

         myAddTracksFromDataSetsOnVolume:
           myDSNPos = mySearchForPos + mySearchForStringLength +1
           myRowPos = pos("Row",myScreenAsString,mySearchForPos) -1
           myMaxDSNLength = myRowPos - myDSNPos
           myVolume = strip(substr(myScreenAsString,myDSNPos,,
             myMaxDSNLength))
           address ispexec
           "lmdinit listid(myListID) volume("myVolume")"
           if RC <> 0 then
             do
               say "LMDInit-RC:"rc
               exit rc
             end
           call myAddAllTracks
           "lmdfree listid("myListID")"
           myEndSysCPU = sysvar("SYSCPU")
           myEndSysSRV = sysvar("SYSSRV")
           myUsedSysCPU = myEndSysCPU - myStartSysCPU
           myUsedSysSRV = myEndSysSRV - myStartSysSRV
           zErrSM = my#OfTracks "Tracks on" myVolume
           zErrLM = my#OfTracks "Tracks(="my#OfCyls":"||,
             my#OfTracksRemainder,
             "Cyls) on",
             "Volume "myVolume" for "myRowCount,
             "lines." mySpaceReturnedCount "lines contain",
             "Datasets which return space information.",
             "CPUTime used:"myUsedSysCPU", Service Units:"myUsedSysSRV
           zErrAlrm = "YES"
           zErrHM = "ISR2MACR"
           "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
           "SETMSG MSG(ISRZ002)"
         return

         myAddAllTracks:
           my#OfTracks = 0
           myRowCount = 0
           mySpaceReturnedCount = 0
           myCurrDS = ""
           if myUseLMDListForeverLoop then              /* very slow */
             do forever
               "lmdlist listid("myListID") dataset(myCurrDS) stats(yes)"
               if rc = 8 then
                 leave                              /* 8=end of list */
               if zDLSize <> "" then
                 do
                   my#OfTracks = my#OfTracks +zDLSize
                   mySpaceReturnedCount = mySpaceReturnedCount +1
                 end /* of if */
               myRowCount = myRowCount +1
             end /* of do forever */
           else                                            /* faster */
             do
               "lmdlist listid("myListID") option(save) stats(yes)",
               "group(TRACKS)"
               address tso
               "dropbuf"
               "alloc f(in) da('"userid()".TRACKS.DATASETS')",
                 "shr reuse"
               "execio * diskr in(fini"
               "free f(in)"
               address ispexec
               do queued()
                 pull line
                 parse value line with 1 dummy 76 myDSTracks 82 dummy
                 if myDSTracks <> "" then
                   do
                     my#OfTracks = my#OfTracks +myDSTracks
                     mySpaceReturnedCount = mySpaceReturnedCount +1
                   end /* of if */
                 myRowCount = myRowCount +1
               end /* of do queued() */
             end /* of else */
           my#OfCyls = my#OfTracks %15
           my#OfTracksRemainder = my#OfTracks //15
         return
